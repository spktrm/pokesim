// source: state/v1/context.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var state_v1_enum_pb = require("../../state/v1/enum_pb.js");
goog.object.extend(proto, state_v1_enum_pb);
goog.exportSymbol("proto.state.v1.Boosts", null, global);
goog.exportSymbol("proto.state.v1.Context", null, global);
goog.exportSymbol("proto.state.v1.Field", null, global);
goog.exportSymbol("proto.state.v1.Pseudoweathers", null, global);
goog.exportSymbol("proto.state.v1.SideConditions", null, global);
goog.exportSymbol("proto.state.v1.Terrains", null, global);
goog.exportSymbol("proto.state.v1.VolatileStatuses", null, global);
goog.exportSymbol("proto.state.v1.Weather", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.SideConditions = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.SideConditions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.SideConditions.displayName = "proto.state.v1.SideConditions";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.VolatileStatuses = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.VolatileStatuses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.VolatileStatuses.displayName =
        "proto.state.v1.VolatileStatuses";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.Boosts = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.Boosts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.Boosts.displayName = "proto.state.v1.Boosts";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.Pseudoweathers = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.Pseudoweathers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.Pseudoweathers.displayName = "proto.state.v1.Pseudoweathers";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.Weather = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.Weather, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.Weather.displayName = "proto.state.v1.Weather";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.Terrains = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.Terrains, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.Terrains.displayName = "proto.state.v1.Terrains";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.Field = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.Field.displayName = "proto.state.v1.Field";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.Context = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.Context, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.Context.displayName = "proto.state.v1.Context";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.SideConditions.prototype.toObject = function (
        opt_includeInstance,
    ) {
        return proto.state.v1.SideConditions.toObject(
            opt_includeInstance,
            this,
        );
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.SideConditions} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.SideConditions.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                auroraveil: jspb.Message.getFieldWithDefault(msg, 1, 0),
                craftyshield: jspb.Message.getFieldWithDefault(msg, 2, 0),
                lightscreen: jspb.Message.getFieldWithDefault(msg, 3, 0),
                luckychant: jspb.Message.getFieldWithDefault(msg, 4, 0),
                matblock: jspb.Message.getFieldWithDefault(msg, 5, 0),
                mist: jspb.Message.getFieldWithDefault(msg, 6, 0),
                quickguard: jspb.Message.getFieldWithDefault(msg, 7, 0),
                reflect: jspb.Message.getFieldWithDefault(msg, 8, 0),
                safeguard: jspb.Message.getFieldWithDefault(msg, 9, 0),
                spikes: jspb.Message.getFieldWithDefault(msg, 10, 0),
                stealthrock: jspb.Message.getFieldWithDefault(msg, 11, 0),
                stickyweb: jspb.Message.getFieldWithDefault(msg, 12, 0),
                tailwind: jspb.Message.getFieldWithDefault(msg, 13, 0),
                toxicspikes: jspb.Message.getFieldWithDefault(msg, 14, 0),
                wideguard: jspb.Message.getFieldWithDefault(msg, 15, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.SideConditions}
 */
proto.state.v1.SideConditions.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.SideConditions();
    return proto.state.v1.SideConditions.deserializeBinaryFromReader(
        msg,
        reader,
    );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.SideConditions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.SideConditions}
 */
proto.state.v1.SideConditions.deserializeBinaryFromReader = function (
    msg,
    reader,
) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAuroraveil(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCraftyshield(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setLightscreen(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setLuckychant(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMatblock(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMist(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setQuickguard(value);
                break;
            case 8:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setReflect(value);
                break;
            case 9:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSafeguard(value);
                break;
            case 10:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpikes(value);
                break;
            case 11:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setStealthrock(value);
                break;
            case 12:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setStickyweb(value);
                break;
            case 13:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTailwind(value);
                break;
            case 14:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setToxicspikes(value);
                break;
            case 15:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setWideguard(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.SideConditions.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.SideConditions.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.SideConditions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.SideConditions.serializeBinaryToWriter = function (
    message,
    writer,
) {
    var f = undefined;
    f = message.getAuroraveil();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getCraftyshield();
    if (f !== 0) {
        writer.writeInt32(2, f);
    }
    f = message.getLightscreen();
    if (f !== 0) {
        writer.writeInt32(3, f);
    }
    f = message.getLuckychant();
    if (f !== 0) {
        writer.writeInt32(4, f);
    }
    f = message.getMatblock();
    if (f !== 0) {
        writer.writeInt32(5, f);
    }
    f = message.getMist();
    if (f !== 0) {
        writer.writeInt32(6, f);
    }
    f = message.getQuickguard();
    if (f !== 0) {
        writer.writeInt32(7, f);
    }
    f = message.getReflect();
    if (f !== 0) {
        writer.writeInt32(8, f);
    }
    f = message.getSafeguard();
    if (f !== 0) {
        writer.writeInt32(9, f);
    }
    f = message.getSpikes();
    if (f !== 0) {
        writer.writeInt32(10, f);
    }
    f = message.getStealthrock();
    if (f !== 0) {
        writer.writeInt32(11, f);
    }
    f = message.getStickyweb();
    if (f !== 0) {
        writer.writeInt32(12, f);
    }
    f = message.getTailwind();
    if (f !== 0) {
        writer.writeInt32(13, f);
    }
    f = message.getToxicspikes();
    if (f !== 0) {
        writer.writeInt32(14, f);
    }
    f = message.getWideguard();
    if (f !== 0) {
        writer.writeInt32(15, f);
    }
};

/**
 * optional int32 auroraveil = 1;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getAuroraveil = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setAuroraveil = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 craftyshield = 2;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getCraftyshield = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setCraftyshield = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 lightscreen = 3;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getLightscreen = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setLightscreen = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int32 luckychant = 4;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getLuckychant = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setLuckychant = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 matblock = 5;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getMatblock = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setMatblock = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int32 mist = 6;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getMist = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setMist = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional int32 quickguard = 7;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getQuickguard = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setQuickguard = function (value) {
    return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int32 reflect = 8;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getReflect = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setReflect = function (value) {
    return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional int32 safeguard = 9;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getSafeguard = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setSafeguard = function (value) {
    return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional int32 spikes = 10;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getSpikes = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 10, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setSpikes = function (value) {
    return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional int32 stealthrock = 11;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getStealthrock = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 11, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setStealthrock = function (value) {
    return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional int32 stickyweb = 12;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getStickyweb = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 12, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setStickyweb = function (value) {
    return jspb.Message.setProto3IntField(this, 12, value);
};

/**
 * optional int32 tailwind = 13;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getTailwind = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 13, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setTailwind = function (value) {
    return jspb.Message.setProto3IntField(this, 13, value);
};

/**
 * optional int32 toxicspikes = 14;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getToxicspikes = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 14, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setToxicspikes = function (value) {
    return jspb.Message.setProto3IntField(this, 14, value);
};

/**
 * optional int32 wideguard = 15;
 * @return {number}
 */
proto.state.v1.SideConditions.prototype.getWideguard = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 15, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.SideConditions} returns this
 */
proto.state.v1.SideConditions.prototype.setWideguard = function (value) {
    return jspb.Message.setProto3IntField(this, 15, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.VolatileStatuses.prototype.toObject = function (
        opt_includeInstance,
    ) {
        return proto.state.v1.VolatileStatuses.toObject(
            opt_includeInstance,
            this,
        );
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.VolatileStatuses} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.VolatileStatuses.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                attract: jspb.Message.getFieldWithDefault(msg, 1, 0),
                banefulbunker: jspb.Message.getFieldWithDefault(msg, 2, 0),
                beakblast: jspb.Message.getFieldWithDefault(msg, 3, 0),
                bide: jspb.Message.getFieldWithDefault(msg, 4, 0),
                bounce: jspb.Message.getFieldWithDefault(msg, 5, 0),
                burningbulwark: jspb.Message.getFieldWithDefault(msg, 6, 0),
                charge: jspb.Message.getFieldWithDefault(msg, 7, 0),
                choicelock: jspb.Message.getFieldWithDefault(msg, 8, 0),
                commanded: jspb.Message.getFieldWithDefault(msg, 9, 0),
                commanding: jspb.Message.getFieldWithDefault(msg, 10, 0),
                confusion: jspb.Message.getFieldWithDefault(msg, 11, 0),
                counter: jspb.Message.getFieldWithDefault(msg, 12, 0),
                cudchew: jspb.Message.getFieldWithDefault(msg, 13, 0),
                curse: jspb.Message.getFieldWithDefault(msg, 14, 0),
                defensecurl: jspb.Message.getFieldWithDefault(msg, 15, 0),
                destinybond: jspb.Message.getFieldWithDefault(msg, 16, 0),
                detect: jspb.Message.getFieldWithDefault(msg, 17, 0),
                dig: jspb.Message.getFieldWithDefault(msg, 18, 0),
                disable: jspb.Message.getFieldWithDefault(msg, 19, 0),
                dive: jspb.Message.getFieldWithDefault(msg, 20, 0),
                dragoncheer: jspb.Message.getFieldWithDefault(msg, 21, 0),
                dynamax: jspb.Message.getFieldWithDefault(msg, 22, 0),
                electrify: jspb.Message.getFieldWithDefault(msg, 23, 0),
                embargo: jspb.Message.getFieldWithDefault(msg, 24, 0),
                encore: jspb.Message.getFieldWithDefault(msg, 25, 0),
                endure: jspb.Message.getFieldWithDefault(msg, 26, 0),
                flashfire: jspb.Message.getFieldWithDefault(msg, 27, 0),
                flinch: jspb.Message.getFieldWithDefault(msg, 28, 0),
                fling: jspb.Message.getFieldWithDefault(msg, 29, 0),
                fly: jspb.Message.getFieldWithDefault(msg, 30, 0),
                focusenergy: jspb.Message.getFieldWithDefault(msg, 31, 0),
                focuspunch: jspb.Message.getFieldWithDefault(msg, 32, 0),
                followme: jspb.Message.getFieldWithDefault(msg, 33, 0),
                foresight: jspb.Message.getFieldWithDefault(msg, 34, 0),
                furycutter: jspb.Message.getFieldWithDefault(msg, 35, 0),
                gastroacid: jspb.Message.getFieldWithDefault(msg, 36, 0),
                gem: jspb.Message.getFieldWithDefault(msg, 37, 0),
                glaiverush: jspb.Message.getFieldWithDefault(msg, 38, 0),
                grudge: jspb.Message.getFieldWithDefault(msg, 39, 0),
                healblock: jspb.Message.getFieldWithDefault(msg, 40, 0),
                helpinghand: jspb.Message.getFieldWithDefault(msg, 41, 0),
                iceball: jspb.Message.getFieldWithDefault(msg, 42, 0),
                imprison: jspb.Message.getFieldWithDefault(msg, 43, 0),
                ingrain: jspb.Message.getFieldWithDefault(msg, 44, 0),
                kingsshield: jspb.Message.getFieldWithDefault(msg, 45, 0),
                laserfocus: jspb.Message.getFieldWithDefault(msg, 46, 0),
                leechseed: jspb.Message.getFieldWithDefault(msg, 47, 0),
                leppaberry: jspb.Message.getFieldWithDefault(msg, 48, 0),
                lockedmove: jspb.Message.getFieldWithDefault(msg, 49, 0),
                lockon: jspb.Message.getFieldWithDefault(msg, 50, 0),
                magiccoat: jspb.Message.getFieldWithDefault(msg, 51, 0),
                magnetrise: jspb.Message.getFieldWithDefault(msg, 52, 0),
                maxguard: jspb.Message.getFieldWithDefault(msg, 53, 0),
                metronome: jspb.Message.getFieldWithDefault(msg, 54, 0),
                micleberry: jspb.Message.getFieldWithDefault(msg, 55, 0),
                minimize: jspb.Message.getFieldWithDefault(msg, 56, 0),
                miracleeye: jspb.Message.getFieldWithDefault(msg, 57, 0),
                mirrorcoat: jspb.Message.getFieldWithDefault(msg, 58, 0),
                mustrecharge: jspb.Message.getFieldWithDefault(msg, 59, 0),
                nightmare: jspb.Message.getFieldWithDefault(msg, 60, 0),
                noretreat: jspb.Message.getFieldWithDefault(msg, 61, 0),
                obstruct: jspb.Message.getFieldWithDefault(msg, 62, 0),
                octolock: jspb.Message.getFieldWithDefault(msg, 63, 0),
                partiallytrapped: jspb.Message.getFieldWithDefault(msg, 64, 0),
                partialtrappinglock: jspb.Message.getFieldWithDefault(
                    msg,
                    65,
                    0,
                ),
                perishsong: jspb.Message.getFieldWithDefault(msg, 66, 0),
                phantomforce: jspb.Message.getFieldWithDefault(msg, 67, 0),
                powder: jspb.Message.getFieldWithDefault(msg, 68, 0),
                powershift: jspb.Message.getFieldWithDefault(msg, 69, 0),
                powertrick: jspb.Message.getFieldWithDefault(msg, 70, 0),
                protect: jspb.Message.getFieldWithDefault(msg, 71, 0),
                protosynthesis: jspb.Message.getFieldWithDefault(msg, 72, 0),
                quarkdrive: jspb.Message.getFieldWithDefault(msg, 73, 0),
                rage: jspb.Message.getFieldWithDefault(msg, 74, 0),
                ragepowder: jspb.Message.getFieldWithDefault(msg, 75, 0),
                rollout: jspb.Message.getFieldWithDefault(msg, 76, 0),
                rolloutstorage: jspb.Message.getFieldWithDefault(msg, 77, 0),
                roost: jspb.Message.getFieldWithDefault(msg, 78, 0),
                saltcure: jspb.Message.getFieldWithDefault(msg, 79, 0),
                shadowforce: jspb.Message.getFieldWithDefault(msg, 80, 0),
                shelltrap: jspb.Message.getFieldWithDefault(msg, 81, 0),
                silktrap: jspb.Message.getFieldWithDefault(msg, 82, 0),
                skydrop: jspb.Message.getFieldWithDefault(msg, 83, 0),
                slowstart: jspb.Message.getFieldWithDefault(msg, 84, 0),
                smackdown: jspb.Message.getFieldWithDefault(msg, 85, 0),
                snatch: jspb.Message.getFieldWithDefault(msg, 86, 0),
                sparklingaria: jspb.Message.getFieldWithDefault(msg, 87, 0),
                spikyshield: jspb.Message.getFieldWithDefault(msg, 88, 0),
                spotlight: jspb.Message.getFieldWithDefault(msg, 89, 0),
                stall: jspb.Message.getFieldWithDefault(msg, 90, 0),
                stockpile: jspb.Message.getFieldWithDefault(msg, 91, 0),
                substitute: jspb.Message.getFieldWithDefault(msg, 92, 0),
                substitutebroken: jspb.Message.getFieldWithDefault(msg, 93, 0),
                syrupbomb: jspb.Message.getFieldWithDefault(msg, 94, 0),
                tarshot: jspb.Message.getFieldWithDefault(msg, 95, 0),
                taunt: jspb.Message.getFieldWithDefault(msg, 96, 0),
                telekinesis: jspb.Message.getFieldWithDefault(msg, 97, 0),
                throatchop: jspb.Message.getFieldWithDefault(msg, 98, 0),
                torment: jspb.Message.getFieldWithDefault(msg, 99, 0),
                trapped: jspb.Message.getFieldWithDefault(msg, 100, 0),
                truant: jspb.Message.getFieldWithDefault(msg, 101, 0),
                twoturnmove: jspb.Message.getFieldWithDefault(msg, 102, 0),
                unburden: jspb.Message.getFieldWithDefault(msg, 103, 0),
                uproar: jspb.Message.getFieldWithDefault(msg, 104, 0),
                yawn: jspb.Message.getFieldWithDefault(msg, 105, 0),
                zenmode: jspb.Message.getFieldWithDefault(msg, 106, 0),
                aquaring: jspb.Message.getFieldWithDefault(msg, 107, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.VolatileStatuses}
 */
proto.state.v1.VolatileStatuses.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.VolatileStatuses();
    return proto.state.v1.VolatileStatuses.deserializeBinaryFromReader(
        msg,
        reader,
    );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.VolatileStatuses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.VolatileStatuses}
 */
proto.state.v1.VolatileStatuses.deserializeBinaryFromReader = function (
    msg,
    reader,
) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAttract(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setBanefulbunker(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setBeakblast(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setBide(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setBounce(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setBurningbulwark(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCharge(value);
                break;
            case 8:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setChoicelock(value);
                break;
            case 9:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCommanded(value);
                break;
            case 10:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCommanding(value);
                break;
            case 11:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setConfusion(value);
                break;
            case 12:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCounter(value);
                break;
            case 13:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCudchew(value);
                break;
            case 14:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCurse(value);
                break;
            case 15:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDefensecurl(value);
                break;
            case 16:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDestinybond(value);
                break;
            case 17:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDetect(value);
                break;
            case 18:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDig(value);
                break;
            case 19:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDisable(value);
                break;
            case 20:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDive(value);
                break;
            case 21:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDragoncheer(value);
                break;
            case 22:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setDynamax(value);
                break;
            case 23:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setElectrify(value);
                break;
            case 24:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEmbargo(value);
                break;
            case 25:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEncore(value);
                break;
            case 26:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEndure(value);
                break;
            case 27:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFlashfire(value);
                break;
            case 28:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFlinch(value);
                break;
            case 29:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFling(value);
                break;
            case 30:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFly(value);
                break;
            case 31:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFocusenergy(value);
                break;
            case 32:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFocuspunch(value);
                break;
            case 33:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFollowme(value);
                break;
            case 34:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setForesight(value);
                break;
            case 35:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFurycutter(value);
                break;
            case 36:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGastroacid(value);
                break;
            case 37:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGem(value);
                break;
            case 38:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGlaiverush(value);
                break;
            case 39:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGrudge(value);
                break;
            case 40:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setHealblock(value);
                break;
            case 41:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setHelpinghand(value);
                break;
            case 42:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setIceball(value);
                break;
            case 43:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setImprison(value);
                break;
            case 44:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setIngrain(value);
                break;
            case 45:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setKingsshield(value);
                break;
            case 46:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setLaserfocus(value);
                break;
            case 47:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setLeechseed(value);
                break;
            case 48:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setLeppaberry(value);
                break;
            case 49:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setLockedmove(value);
                break;
            case 50:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setLockon(value);
                break;
            case 51:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMagiccoat(value);
                break;
            case 52:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMagnetrise(value);
                break;
            case 53:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxguard(value);
                break;
            case 54:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMetronome(value);
                break;
            case 55:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMicleberry(value);
                break;
            case 56:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMinimize(value);
                break;
            case 57:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMiracleeye(value);
                break;
            case 58:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMirrorcoat(value);
                break;
            case 59:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMustrecharge(value);
                break;
            case 60:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setNightmare(value);
                break;
            case 61:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setNoretreat(value);
                break;
            case 62:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setObstruct(value);
                break;
            case 63:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setOctolock(value);
                break;
            case 64:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPartiallytrapped(value);
                break;
            case 65:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPartialtrappinglock(value);
                break;
            case 66:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPerishsong(value);
                break;
            case 67:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPhantomforce(value);
                break;
            case 68:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPowder(value);
                break;
            case 69:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPowershift(value);
                break;
            case 70:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPowertrick(value);
                break;
            case 71:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setProtect(value);
                break;
            case 72:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setProtosynthesis(value);
                break;
            case 73:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setQuarkdrive(value);
                break;
            case 74:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRage(value);
                break;
            case 75:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRagepowder(value);
                break;
            case 76:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRollout(value);
                break;
            case 77:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRolloutstorage(value);
                break;
            case 78:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRoost(value);
                break;
            case 79:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSaltcure(value);
                break;
            case 80:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setShadowforce(value);
                break;
            case 81:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setShelltrap(value);
                break;
            case 82:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSilktrap(value);
                break;
            case 83:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSkydrop(value);
                break;
            case 84:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSlowstart(value);
                break;
            case 85:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSmackdown(value);
                break;
            case 86:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSnatch(value);
                break;
            case 87:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSparklingaria(value);
                break;
            case 88:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpikyshield(value);
                break;
            case 89:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpotlight(value);
                break;
            case 90:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setStall(value);
                break;
            case 91:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setStockpile(value);
                break;
            case 92:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSubstitute(value);
                break;
            case 93:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSubstitutebroken(value);
                break;
            case 94:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSyrupbomb(value);
                break;
            case 95:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTarshot(value);
                break;
            case 96:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTaunt(value);
                break;
            case 97:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTelekinesis(value);
                break;
            case 98:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setThroatchop(value);
                break;
            case 99:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTorment(value);
                break;
            case 100:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTrapped(value);
                break;
            case 101:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTruant(value);
                break;
            case 102:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTwoturnmove(value);
                break;
            case 103:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setUnburden(value);
                break;
            case 104:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setUproar(value);
                break;
            case 105:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setYawn(value);
                break;
            case 106:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setZenmode(value);
                break;
            case 107:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAquaring(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.VolatileStatuses.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.VolatileStatuses.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.VolatileStatuses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.VolatileStatuses.serializeBinaryToWriter = function (
    message,
    writer,
) {
    var f = undefined;
    f = message.getAttract();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getBanefulbunker();
    if (f !== 0) {
        writer.writeInt32(2, f);
    }
    f = message.getBeakblast();
    if (f !== 0) {
        writer.writeInt32(3, f);
    }
    f = message.getBide();
    if (f !== 0) {
        writer.writeInt32(4, f);
    }
    f = message.getBounce();
    if (f !== 0) {
        writer.writeInt32(5, f);
    }
    f = message.getBurningbulwark();
    if (f !== 0) {
        writer.writeInt32(6, f);
    }
    f = message.getCharge();
    if (f !== 0) {
        writer.writeInt32(7, f);
    }
    f = message.getChoicelock();
    if (f !== 0) {
        writer.writeInt32(8, f);
    }
    f = message.getCommanded();
    if (f !== 0) {
        writer.writeInt32(9, f);
    }
    f = message.getCommanding();
    if (f !== 0) {
        writer.writeInt32(10, f);
    }
    f = message.getConfusion();
    if (f !== 0) {
        writer.writeInt32(11, f);
    }
    f = message.getCounter();
    if (f !== 0) {
        writer.writeInt32(12, f);
    }
    f = message.getCudchew();
    if (f !== 0) {
        writer.writeInt32(13, f);
    }
    f = message.getCurse();
    if (f !== 0) {
        writer.writeInt32(14, f);
    }
    f = message.getDefensecurl();
    if (f !== 0) {
        writer.writeInt32(15, f);
    }
    f = message.getDestinybond();
    if (f !== 0) {
        writer.writeInt32(16, f);
    }
    f = message.getDetect();
    if (f !== 0) {
        writer.writeInt32(17, f);
    }
    f = message.getDig();
    if (f !== 0) {
        writer.writeInt32(18, f);
    }
    f = message.getDisable();
    if (f !== 0) {
        writer.writeInt32(19, f);
    }
    f = message.getDive();
    if (f !== 0) {
        writer.writeInt32(20, f);
    }
    f = message.getDragoncheer();
    if (f !== 0) {
        writer.writeInt32(21, f);
    }
    f = message.getDynamax();
    if (f !== 0) {
        writer.writeInt32(22, f);
    }
    f = message.getElectrify();
    if (f !== 0) {
        writer.writeInt32(23, f);
    }
    f = message.getEmbargo();
    if (f !== 0) {
        writer.writeInt32(24, f);
    }
    f = message.getEncore();
    if (f !== 0) {
        writer.writeInt32(25, f);
    }
    f = message.getEndure();
    if (f !== 0) {
        writer.writeInt32(26, f);
    }
    f = message.getFlashfire();
    if (f !== 0) {
        writer.writeInt32(27, f);
    }
    f = message.getFlinch();
    if (f !== 0) {
        writer.writeInt32(28, f);
    }
    f = message.getFling();
    if (f !== 0) {
        writer.writeInt32(29, f);
    }
    f = message.getFly();
    if (f !== 0) {
        writer.writeInt32(30, f);
    }
    f = message.getFocusenergy();
    if (f !== 0) {
        writer.writeInt32(31, f);
    }
    f = message.getFocuspunch();
    if (f !== 0) {
        writer.writeInt32(32, f);
    }
    f = message.getFollowme();
    if (f !== 0) {
        writer.writeInt32(33, f);
    }
    f = message.getForesight();
    if (f !== 0) {
        writer.writeInt32(34, f);
    }
    f = message.getFurycutter();
    if (f !== 0) {
        writer.writeInt32(35, f);
    }
    f = message.getGastroacid();
    if (f !== 0) {
        writer.writeInt32(36, f);
    }
    f = message.getGem();
    if (f !== 0) {
        writer.writeInt32(37, f);
    }
    f = message.getGlaiverush();
    if (f !== 0) {
        writer.writeInt32(38, f);
    }
    f = message.getGrudge();
    if (f !== 0) {
        writer.writeInt32(39, f);
    }
    f = message.getHealblock();
    if (f !== 0) {
        writer.writeInt32(40, f);
    }
    f = message.getHelpinghand();
    if (f !== 0) {
        writer.writeInt32(41, f);
    }
    f = message.getIceball();
    if (f !== 0) {
        writer.writeInt32(42, f);
    }
    f = message.getImprison();
    if (f !== 0) {
        writer.writeInt32(43, f);
    }
    f = message.getIngrain();
    if (f !== 0) {
        writer.writeInt32(44, f);
    }
    f = message.getKingsshield();
    if (f !== 0) {
        writer.writeInt32(45, f);
    }
    f = message.getLaserfocus();
    if (f !== 0) {
        writer.writeInt32(46, f);
    }
    f = message.getLeechseed();
    if (f !== 0) {
        writer.writeInt32(47, f);
    }
    f = message.getLeppaberry();
    if (f !== 0) {
        writer.writeInt32(48, f);
    }
    f = message.getLockedmove();
    if (f !== 0) {
        writer.writeInt32(49, f);
    }
    f = message.getLockon();
    if (f !== 0) {
        writer.writeInt32(50, f);
    }
    f = message.getMagiccoat();
    if (f !== 0) {
        writer.writeInt32(51, f);
    }
    f = message.getMagnetrise();
    if (f !== 0) {
        writer.writeInt32(52, f);
    }
    f = message.getMaxguard();
    if (f !== 0) {
        writer.writeInt32(53, f);
    }
    f = message.getMetronome();
    if (f !== 0) {
        writer.writeInt32(54, f);
    }
    f = message.getMicleberry();
    if (f !== 0) {
        writer.writeInt32(55, f);
    }
    f = message.getMinimize();
    if (f !== 0) {
        writer.writeInt32(56, f);
    }
    f = message.getMiracleeye();
    if (f !== 0) {
        writer.writeInt32(57, f);
    }
    f = message.getMirrorcoat();
    if (f !== 0) {
        writer.writeInt32(58, f);
    }
    f = message.getMustrecharge();
    if (f !== 0) {
        writer.writeInt32(59, f);
    }
    f = message.getNightmare();
    if (f !== 0) {
        writer.writeInt32(60, f);
    }
    f = message.getNoretreat();
    if (f !== 0) {
        writer.writeInt32(61, f);
    }
    f = message.getObstruct();
    if (f !== 0) {
        writer.writeInt32(62, f);
    }
    f = message.getOctolock();
    if (f !== 0) {
        writer.writeInt32(63, f);
    }
    f = message.getPartiallytrapped();
    if (f !== 0) {
        writer.writeInt32(64, f);
    }
    f = message.getPartialtrappinglock();
    if (f !== 0) {
        writer.writeInt32(65, f);
    }
    f = message.getPerishsong();
    if (f !== 0) {
        writer.writeInt32(66, f);
    }
    f = message.getPhantomforce();
    if (f !== 0) {
        writer.writeInt32(67, f);
    }
    f = message.getPowder();
    if (f !== 0) {
        writer.writeInt32(68, f);
    }
    f = message.getPowershift();
    if (f !== 0) {
        writer.writeInt32(69, f);
    }
    f = message.getPowertrick();
    if (f !== 0) {
        writer.writeInt32(70, f);
    }
    f = message.getProtect();
    if (f !== 0) {
        writer.writeInt32(71, f);
    }
    f = message.getProtosynthesis();
    if (f !== 0) {
        writer.writeInt32(72, f);
    }
    f = message.getQuarkdrive();
    if (f !== 0) {
        writer.writeInt32(73, f);
    }
    f = message.getRage();
    if (f !== 0) {
        writer.writeInt32(74, f);
    }
    f = message.getRagepowder();
    if (f !== 0) {
        writer.writeInt32(75, f);
    }
    f = message.getRollout();
    if (f !== 0) {
        writer.writeInt32(76, f);
    }
    f = message.getRolloutstorage();
    if (f !== 0) {
        writer.writeInt32(77, f);
    }
    f = message.getRoost();
    if (f !== 0) {
        writer.writeInt32(78, f);
    }
    f = message.getSaltcure();
    if (f !== 0) {
        writer.writeInt32(79, f);
    }
    f = message.getShadowforce();
    if (f !== 0) {
        writer.writeInt32(80, f);
    }
    f = message.getShelltrap();
    if (f !== 0) {
        writer.writeInt32(81, f);
    }
    f = message.getSilktrap();
    if (f !== 0) {
        writer.writeInt32(82, f);
    }
    f = message.getSkydrop();
    if (f !== 0) {
        writer.writeInt32(83, f);
    }
    f = message.getSlowstart();
    if (f !== 0) {
        writer.writeInt32(84, f);
    }
    f = message.getSmackdown();
    if (f !== 0) {
        writer.writeInt32(85, f);
    }
    f = message.getSnatch();
    if (f !== 0) {
        writer.writeInt32(86, f);
    }
    f = message.getSparklingaria();
    if (f !== 0) {
        writer.writeInt32(87, f);
    }
    f = message.getSpikyshield();
    if (f !== 0) {
        writer.writeInt32(88, f);
    }
    f = message.getSpotlight();
    if (f !== 0) {
        writer.writeInt32(89, f);
    }
    f = message.getStall();
    if (f !== 0) {
        writer.writeInt32(90, f);
    }
    f = message.getStockpile();
    if (f !== 0) {
        writer.writeInt32(91, f);
    }
    f = message.getSubstitute();
    if (f !== 0) {
        writer.writeInt32(92, f);
    }
    f = message.getSubstitutebroken();
    if (f !== 0) {
        writer.writeInt32(93, f);
    }
    f = message.getSyrupbomb();
    if (f !== 0) {
        writer.writeInt32(94, f);
    }
    f = message.getTarshot();
    if (f !== 0) {
        writer.writeInt32(95, f);
    }
    f = message.getTaunt();
    if (f !== 0) {
        writer.writeInt32(96, f);
    }
    f = message.getTelekinesis();
    if (f !== 0) {
        writer.writeInt32(97, f);
    }
    f = message.getThroatchop();
    if (f !== 0) {
        writer.writeInt32(98, f);
    }
    f = message.getTorment();
    if (f !== 0) {
        writer.writeInt32(99, f);
    }
    f = message.getTrapped();
    if (f !== 0) {
        writer.writeInt32(100, f);
    }
    f = message.getTruant();
    if (f !== 0) {
        writer.writeInt32(101, f);
    }
    f = message.getTwoturnmove();
    if (f !== 0) {
        writer.writeInt32(102, f);
    }
    f = message.getUnburden();
    if (f !== 0) {
        writer.writeInt32(103, f);
    }
    f = message.getUproar();
    if (f !== 0) {
        writer.writeInt32(104, f);
    }
    f = message.getYawn();
    if (f !== 0) {
        writer.writeInt32(105, f);
    }
    f = message.getZenmode();
    if (f !== 0) {
        writer.writeInt32(106, f);
    }
    f = message.getAquaring();
    if (f !== 0) {
        writer.writeInt32(107, f);
    }
};

/**
 * optional int32 attract = 1;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getAttract = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setAttract = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 banefulbunker = 2;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getBanefulbunker = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setBanefulbunker = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 beakblast = 3;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getBeakblast = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setBeakblast = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int32 bide = 4;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getBide = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setBide = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 bounce = 5;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getBounce = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setBounce = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int32 burningbulwark = 6;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getBurningbulwark = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setBurningbulwark = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional int32 charge = 7;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getCharge = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setCharge = function (value) {
    return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int32 choicelock = 8;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getChoicelock = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setChoicelock = function (value) {
    return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional int32 commanded = 9;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getCommanded = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setCommanded = function (value) {
    return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional int32 commanding = 10;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getCommanding = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 10, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setCommanding = function (value) {
    return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional int32 confusion = 11;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getConfusion = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 11, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setConfusion = function (value) {
    return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional int32 counter = 12;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getCounter = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 12, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setCounter = function (value) {
    return jspb.Message.setProto3IntField(this, 12, value);
};

/**
 * optional int32 cudchew = 13;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getCudchew = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 13, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setCudchew = function (value) {
    return jspb.Message.setProto3IntField(this, 13, value);
};

/**
 * optional int32 curse = 14;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getCurse = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 14, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setCurse = function (value) {
    return jspb.Message.setProto3IntField(this, 14, value);
};

/**
 * optional int32 defensecurl = 15;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getDefensecurl = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 15, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setDefensecurl = function (value) {
    return jspb.Message.setProto3IntField(this, 15, value);
};

/**
 * optional int32 destinybond = 16;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getDestinybond = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 16, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setDestinybond = function (value) {
    return jspb.Message.setProto3IntField(this, 16, value);
};

/**
 * optional int32 detect = 17;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getDetect = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 17, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setDetect = function (value) {
    return jspb.Message.setProto3IntField(this, 17, value);
};

/**
 * optional int32 dig = 18;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getDig = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 18, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setDig = function (value) {
    return jspb.Message.setProto3IntField(this, 18, value);
};

/**
 * optional int32 disable = 19;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getDisable = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 19, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setDisable = function (value) {
    return jspb.Message.setProto3IntField(this, 19, value);
};

/**
 * optional int32 dive = 20;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getDive = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 20, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setDive = function (value) {
    return jspb.Message.setProto3IntField(this, 20, value);
};

/**
 * optional int32 dragoncheer = 21;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getDragoncheer = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 21, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setDragoncheer = function (value) {
    return jspb.Message.setProto3IntField(this, 21, value);
};

/**
 * optional int32 dynamax = 22;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getDynamax = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 22, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setDynamax = function (value) {
    return jspb.Message.setProto3IntField(this, 22, value);
};

/**
 * optional int32 electrify = 23;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getElectrify = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 23, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setElectrify = function (value) {
    return jspb.Message.setProto3IntField(this, 23, value);
};

/**
 * optional int32 embargo = 24;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getEmbargo = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 24, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setEmbargo = function (value) {
    return jspb.Message.setProto3IntField(this, 24, value);
};

/**
 * optional int32 encore = 25;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getEncore = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 25, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setEncore = function (value) {
    return jspb.Message.setProto3IntField(this, 25, value);
};

/**
 * optional int32 endure = 26;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getEndure = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 26, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setEndure = function (value) {
    return jspb.Message.setProto3IntField(this, 26, value);
};

/**
 * optional int32 flashfire = 27;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getFlashfire = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 27, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setFlashfire = function (value) {
    return jspb.Message.setProto3IntField(this, 27, value);
};

/**
 * optional int32 flinch = 28;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getFlinch = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 28, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setFlinch = function (value) {
    return jspb.Message.setProto3IntField(this, 28, value);
};

/**
 * optional int32 fling = 29;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getFling = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 29, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setFling = function (value) {
    return jspb.Message.setProto3IntField(this, 29, value);
};

/**
 * optional int32 fly = 30;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getFly = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 30, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setFly = function (value) {
    return jspb.Message.setProto3IntField(this, 30, value);
};

/**
 * optional int32 focusenergy = 31;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getFocusenergy = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 31, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setFocusenergy = function (value) {
    return jspb.Message.setProto3IntField(this, 31, value);
};

/**
 * optional int32 focuspunch = 32;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getFocuspunch = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 32, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setFocuspunch = function (value) {
    return jspb.Message.setProto3IntField(this, 32, value);
};

/**
 * optional int32 followme = 33;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getFollowme = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 33, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setFollowme = function (value) {
    return jspb.Message.setProto3IntField(this, 33, value);
};

/**
 * optional int32 foresight = 34;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getForesight = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 34, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setForesight = function (value) {
    return jspb.Message.setProto3IntField(this, 34, value);
};

/**
 * optional int32 furycutter = 35;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getFurycutter = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 35, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setFurycutter = function (value) {
    return jspb.Message.setProto3IntField(this, 35, value);
};

/**
 * optional int32 gastroacid = 36;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getGastroacid = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 36, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setGastroacid = function (value) {
    return jspb.Message.setProto3IntField(this, 36, value);
};

/**
 * optional int32 gem = 37;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getGem = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 37, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setGem = function (value) {
    return jspb.Message.setProto3IntField(this, 37, value);
};

/**
 * optional int32 glaiverush = 38;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getGlaiverush = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 38, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setGlaiverush = function (value) {
    return jspb.Message.setProto3IntField(this, 38, value);
};

/**
 * optional int32 grudge = 39;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getGrudge = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 39, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setGrudge = function (value) {
    return jspb.Message.setProto3IntField(this, 39, value);
};

/**
 * optional int32 healblock = 40;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getHealblock = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 40, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setHealblock = function (value) {
    return jspb.Message.setProto3IntField(this, 40, value);
};

/**
 * optional int32 helpinghand = 41;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getHelpinghand = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 41, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setHelpinghand = function (value) {
    return jspb.Message.setProto3IntField(this, 41, value);
};

/**
 * optional int32 iceball = 42;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getIceball = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 42, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setIceball = function (value) {
    return jspb.Message.setProto3IntField(this, 42, value);
};

/**
 * optional int32 imprison = 43;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getImprison = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 43, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setImprison = function (value) {
    return jspb.Message.setProto3IntField(this, 43, value);
};

/**
 * optional int32 ingrain = 44;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getIngrain = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 44, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setIngrain = function (value) {
    return jspb.Message.setProto3IntField(this, 44, value);
};

/**
 * optional int32 kingsshield = 45;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getKingsshield = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 45, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setKingsshield = function (value) {
    return jspb.Message.setProto3IntField(this, 45, value);
};

/**
 * optional int32 laserfocus = 46;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getLaserfocus = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 46, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setLaserfocus = function (value) {
    return jspb.Message.setProto3IntField(this, 46, value);
};

/**
 * optional int32 leechseed = 47;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getLeechseed = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 47, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setLeechseed = function (value) {
    return jspb.Message.setProto3IntField(this, 47, value);
};

/**
 * optional int32 leppaberry = 48;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getLeppaberry = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 48, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setLeppaberry = function (value) {
    return jspb.Message.setProto3IntField(this, 48, value);
};

/**
 * optional int32 lockedmove = 49;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getLockedmove = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 49, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setLockedmove = function (value) {
    return jspb.Message.setProto3IntField(this, 49, value);
};

/**
 * optional int32 lockon = 50;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getLockon = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 50, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setLockon = function (value) {
    return jspb.Message.setProto3IntField(this, 50, value);
};

/**
 * optional int32 magiccoat = 51;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMagiccoat = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 51, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMagiccoat = function (value) {
    return jspb.Message.setProto3IntField(this, 51, value);
};

/**
 * optional int32 magnetrise = 52;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMagnetrise = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 52, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMagnetrise = function (value) {
    return jspb.Message.setProto3IntField(this, 52, value);
};

/**
 * optional int32 maxguard = 53;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMaxguard = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 53, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMaxguard = function (value) {
    return jspb.Message.setProto3IntField(this, 53, value);
};

/**
 * optional int32 metronome = 54;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMetronome = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 54, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMetronome = function (value) {
    return jspb.Message.setProto3IntField(this, 54, value);
};

/**
 * optional int32 micleberry = 55;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMicleberry = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 55, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMicleberry = function (value) {
    return jspb.Message.setProto3IntField(this, 55, value);
};

/**
 * optional int32 minimize = 56;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMinimize = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 56, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMinimize = function (value) {
    return jspb.Message.setProto3IntField(this, 56, value);
};

/**
 * optional int32 miracleeye = 57;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMiracleeye = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 57, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMiracleeye = function (value) {
    return jspb.Message.setProto3IntField(this, 57, value);
};

/**
 * optional int32 mirrorcoat = 58;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMirrorcoat = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 58, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMirrorcoat = function (value) {
    return jspb.Message.setProto3IntField(this, 58, value);
};

/**
 * optional int32 mustrecharge = 59;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getMustrecharge = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 59, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setMustrecharge = function (value) {
    return jspb.Message.setProto3IntField(this, 59, value);
};

/**
 * optional int32 nightmare = 60;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getNightmare = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 60, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setNightmare = function (value) {
    return jspb.Message.setProto3IntField(this, 60, value);
};

/**
 * optional int32 noretreat = 61;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getNoretreat = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 61, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setNoretreat = function (value) {
    return jspb.Message.setProto3IntField(this, 61, value);
};

/**
 * optional int32 obstruct = 62;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getObstruct = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 62, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setObstruct = function (value) {
    return jspb.Message.setProto3IntField(this, 62, value);
};

/**
 * optional int32 octolock = 63;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getOctolock = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 63, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setOctolock = function (value) {
    return jspb.Message.setProto3IntField(this, 63, value);
};

/**
 * optional int32 partiallytrapped = 64;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getPartiallytrapped = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 64, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setPartiallytrapped = function (
    value,
) {
    return jspb.Message.setProto3IntField(this, 64, value);
};

/**
 * optional int32 partialtrappinglock = 65;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getPartialtrappinglock = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 65, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setPartialtrappinglock = function (
    value,
) {
    return jspb.Message.setProto3IntField(this, 65, value);
};

/**
 * optional int32 perishsong = 66;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getPerishsong = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 66, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setPerishsong = function (value) {
    return jspb.Message.setProto3IntField(this, 66, value);
};

/**
 * optional int32 phantomforce = 67;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getPhantomforce = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 67, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setPhantomforce = function (value) {
    return jspb.Message.setProto3IntField(this, 67, value);
};

/**
 * optional int32 powder = 68;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getPowder = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 68, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setPowder = function (value) {
    return jspb.Message.setProto3IntField(this, 68, value);
};

/**
 * optional int32 powershift = 69;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getPowershift = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 69, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setPowershift = function (value) {
    return jspb.Message.setProto3IntField(this, 69, value);
};

/**
 * optional int32 powertrick = 70;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getPowertrick = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 70, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setPowertrick = function (value) {
    return jspb.Message.setProto3IntField(this, 70, value);
};

/**
 * optional int32 protect = 71;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getProtect = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 71, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setProtect = function (value) {
    return jspb.Message.setProto3IntField(this, 71, value);
};

/**
 * optional int32 protosynthesis = 72;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getProtosynthesis = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 72, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setProtosynthesis = function (value) {
    return jspb.Message.setProto3IntField(this, 72, value);
};

/**
 * optional int32 quarkdrive = 73;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getQuarkdrive = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 73, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setQuarkdrive = function (value) {
    return jspb.Message.setProto3IntField(this, 73, value);
};

/**
 * optional int32 rage = 74;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getRage = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 74, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setRage = function (value) {
    return jspb.Message.setProto3IntField(this, 74, value);
};

/**
 * optional int32 ragepowder = 75;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getRagepowder = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 75, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setRagepowder = function (value) {
    return jspb.Message.setProto3IntField(this, 75, value);
};

/**
 * optional int32 rollout = 76;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getRollout = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 76, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setRollout = function (value) {
    return jspb.Message.setProto3IntField(this, 76, value);
};

/**
 * optional int32 rolloutstorage = 77;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getRolloutstorage = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 77, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setRolloutstorage = function (value) {
    return jspb.Message.setProto3IntField(this, 77, value);
};

/**
 * optional int32 roost = 78;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getRoost = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 78, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setRoost = function (value) {
    return jspb.Message.setProto3IntField(this, 78, value);
};

/**
 * optional int32 saltcure = 79;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSaltcure = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 79, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSaltcure = function (value) {
    return jspb.Message.setProto3IntField(this, 79, value);
};

/**
 * optional int32 shadowforce = 80;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getShadowforce = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 80, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setShadowforce = function (value) {
    return jspb.Message.setProto3IntField(this, 80, value);
};

/**
 * optional int32 shelltrap = 81;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getShelltrap = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 81, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setShelltrap = function (value) {
    return jspb.Message.setProto3IntField(this, 81, value);
};

/**
 * optional int32 silktrap = 82;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSilktrap = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 82, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSilktrap = function (value) {
    return jspb.Message.setProto3IntField(this, 82, value);
};

/**
 * optional int32 skydrop = 83;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSkydrop = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 83, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSkydrop = function (value) {
    return jspb.Message.setProto3IntField(this, 83, value);
};

/**
 * optional int32 slowstart = 84;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSlowstart = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 84, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSlowstart = function (value) {
    return jspb.Message.setProto3IntField(this, 84, value);
};

/**
 * optional int32 smackdown = 85;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSmackdown = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 85, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSmackdown = function (value) {
    return jspb.Message.setProto3IntField(this, 85, value);
};

/**
 * optional int32 snatch = 86;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSnatch = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 86, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSnatch = function (value) {
    return jspb.Message.setProto3IntField(this, 86, value);
};

/**
 * optional int32 sparklingaria = 87;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSparklingaria = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 87, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSparklingaria = function (value) {
    return jspb.Message.setProto3IntField(this, 87, value);
};

/**
 * optional int32 spikyshield = 88;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSpikyshield = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 88, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSpikyshield = function (value) {
    return jspb.Message.setProto3IntField(this, 88, value);
};

/**
 * optional int32 spotlight = 89;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSpotlight = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 89, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSpotlight = function (value) {
    return jspb.Message.setProto3IntField(this, 89, value);
};

/**
 * optional int32 stall = 90;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getStall = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 90, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setStall = function (value) {
    return jspb.Message.setProto3IntField(this, 90, value);
};

/**
 * optional int32 stockpile = 91;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getStockpile = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 91, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setStockpile = function (value) {
    return jspb.Message.setProto3IntField(this, 91, value);
};

/**
 * optional int32 substitute = 92;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSubstitute = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 92, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSubstitute = function (value) {
    return jspb.Message.setProto3IntField(this, 92, value);
};

/**
 * optional int32 substitutebroken = 93;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSubstitutebroken = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 93, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSubstitutebroken = function (
    value,
) {
    return jspb.Message.setProto3IntField(this, 93, value);
};

/**
 * optional int32 syrupbomb = 94;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getSyrupbomb = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 94, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setSyrupbomb = function (value) {
    return jspb.Message.setProto3IntField(this, 94, value);
};

/**
 * optional int32 tarshot = 95;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getTarshot = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 95, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setTarshot = function (value) {
    return jspb.Message.setProto3IntField(this, 95, value);
};

/**
 * optional int32 taunt = 96;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getTaunt = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 96, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setTaunt = function (value) {
    return jspb.Message.setProto3IntField(this, 96, value);
};

/**
 * optional int32 telekinesis = 97;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getTelekinesis = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 97, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setTelekinesis = function (value) {
    return jspb.Message.setProto3IntField(this, 97, value);
};

/**
 * optional int32 throatchop = 98;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getThroatchop = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 98, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setThroatchop = function (value) {
    return jspb.Message.setProto3IntField(this, 98, value);
};

/**
 * optional int32 torment = 99;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getTorment = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 99, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setTorment = function (value) {
    return jspb.Message.setProto3IntField(this, 99, value);
};

/**
 * optional int32 trapped = 100;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getTrapped = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 100, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setTrapped = function (value) {
    return jspb.Message.setProto3IntField(this, 100, value);
};

/**
 * optional int32 truant = 101;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getTruant = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 101, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setTruant = function (value) {
    return jspb.Message.setProto3IntField(this, 101, value);
};

/**
 * optional int32 twoturnmove = 102;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getTwoturnmove = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 102, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setTwoturnmove = function (value) {
    return jspb.Message.setProto3IntField(this, 102, value);
};

/**
 * optional int32 unburden = 103;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getUnburden = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 103, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setUnburden = function (value) {
    return jspb.Message.setProto3IntField(this, 103, value);
};

/**
 * optional int32 uproar = 104;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getUproar = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 104, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setUproar = function (value) {
    return jspb.Message.setProto3IntField(this, 104, value);
};

/**
 * optional int32 yawn = 105;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getYawn = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 105, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setYawn = function (value) {
    return jspb.Message.setProto3IntField(this, 105, value);
};

/**
 * optional int32 zenmode = 106;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getZenmode = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 106, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setZenmode = function (value) {
    return jspb.Message.setProto3IntField(this, 106, value);
};

/**
 * optional int32 aquaring = 107;
 * @return {number}
 */
proto.state.v1.VolatileStatuses.prototype.getAquaring = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 107, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.VolatileStatuses} returns this
 */
proto.state.v1.VolatileStatuses.prototype.setAquaring = function (value) {
    return jspb.Message.setProto3IntField(this, 107, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.Boosts.prototype.toObject = function (opt_includeInstance) {
        return proto.state.v1.Boosts.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.Boosts} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.Boosts.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                atk: jspb.Message.getFieldWithDefault(msg, 1, 0),
                def: jspb.Message.getFieldWithDefault(msg, 2, 0),
                spa: jspb.Message.getFieldWithDefault(msg, 3, 0),
                spd: jspb.Message.getFieldWithDefault(msg, 4, 0),
                spe: jspb.Message.getFieldWithDefault(msg, 5, 0),
                accuracy: jspb.Message.getFieldWithDefault(msg, 6, 0),
                evasion: jspb.Message.getFieldWithDefault(msg, 7, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.Boosts}
 */
proto.state.v1.Boosts.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.Boosts();
    return proto.state.v1.Boosts.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.Boosts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.Boosts}
 */
proto.state.v1.Boosts.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readSint32());
                msg.setAtk(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readSint32());
                msg.setDef(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readSint32());
                msg.setSpa(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readSint32());
                msg.setSpd(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readSint32());
                msg.setSpe(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readSint32());
                msg.setAccuracy(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readSint32());
                msg.setEvasion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.Boosts.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.Boosts.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.Boosts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.Boosts.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAtk();
    if (f !== 0) {
        writer.writeSint32(1, f);
    }
    f = message.getDef();
    if (f !== 0) {
        writer.writeSint32(2, f);
    }
    f = message.getSpa();
    if (f !== 0) {
        writer.writeSint32(3, f);
    }
    f = message.getSpd();
    if (f !== 0) {
        writer.writeSint32(4, f);
    }
    f = message.getSpe();
    if (f !== 0) {
        writer.writeSint32(5, f);
    }
    f = message.getAccuracy();
    if (f !== 0) {
        writer.writeSint32(6, f);
    }
    f = message.getEvasion();
    if (f !== 0) {
        writer.writeSint32(7, f);
    }
};

/**
 * optional sint32 atk = 1;
 * @return {number}
 */
proto.state.v1.Boosts.prototype.getAtk = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Boosts} returns this
 */
proto.state.v1.Boosts.prototype.setAtk = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional sint32 def = 2;
 * @return {number}
 */
proto.state.v1.Boosts.prototype.getDef = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Boosts} returns this
 */
proto.state.v1.Boosts.prototype.setDef = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional sint32 spa = 3;
 * @return {number}
 */
proto.state.v1.Boosts.prototype.getSpa = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Boosts} returns this
 */
proto.state.v1.Boosts.prototype.setSpa = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional sint32 spd = 4;
 * @return {number}
 */
proto.state.v1.Boosts.prototype.getSpd = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Boosts} returns this
 */
proto.state.v1.Boosts.prototype.setSpd = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional sint32 spe = 5;
 * @return {number}
 */
proto.state.v1.Boosts.prototype.getSpe = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Boosts} returns this
 */
proto.state.v1.Boosts.prototype.setSpe = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional sint32 accuracy = 6;
 * @return {number}
 */
proto.state.v1.Boosts.prototype.getAccuracy = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Boosts} returns this
 */
proto.state.v1.Boosts.prototype.setAccuracy = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional sint32 evasion = 7;
 * @return {number}
 */
proto.state.v1.Boosts.prototype.getEvasion = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Boosts} returns this
 */
proto.state.v1.Boosts.prototype.setEvasion = function (value) {
    return jspb.Message.setProto3IntField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.Pseudoweathers.prototype.toObject = function (
        opt_includeInstance,
    ) {
        return proto.state.v1.Pseudoweathers.toObject(
            opt_includeInstance,
            this,
        );
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.Pseudoweathers} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.Pseudoweathers.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                fairylock: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    1,
                    false,
                ),
                gravity: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
                iondeluge: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    3,
                    false,
                ),
                magicroom: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    4,
                    false,
                ),
                mudsport: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    5,
                    false,
                ),
                trickroom: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    6,
                    false,
                ),
                watersport: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    7,
                    false,
                ),
                wonderroom: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    8,
                    false,
                ),
                fairylockMinDur: jspb.Message.getFieldWithDefault(msg, 9, 0),
                gravityMinDur: jspb.Message.getFieldWithDefault(msg, 10, 0),
                iondelugeMinDur: jspb.Message.getFieldWithDefault(msg, 11, 0),
                magicroomMinDur: jspb.Message.getFieldWithDefault(msg, 12, 0),
                mudsportMinDur: jspb.Message.getFieldWithDefault(msg, 13, 0),
                trickroomMinDur: jspb.Message.getFieldWithDefault(msg, 14, 0),
                watersportMinDur: jspb.Message.getFieldWithDefault(msg, 15, 0),
                wonderroomMinDur: jspb.Message.getFieldWithDefault(msg, 16, 0),
                fairylockMaxDur: jspb.Message.getFieldWithDefault(msg, 17, 0),
                gravityMaxDur: jspb.Message.getFieldWithDefault(msg, 18, 0),
                iondelugeMaxDur: jspb.Message.getFieldWithDefault(msg, 19, 0),
                magicroomMaxDur: jspb.Message.getFieldWithDefault(msg, 20, 0),
                mudsportMaxDur: jspb.Message.getFieldWithDefault(msg, 21, 0),
                trickroomMaxDur: jspb.Message.getFieldWithDefault(msg, 22, 0),
                watersportMaxDur: jspb.Message.getFieldWithDefault(msg, 23, 0),
                wonderroomMaxDur: jspb.Message.getFieldWithDefault(msg, 24, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.Pseudoweathers}
 */
proto.state.v1.Pseudoweathers.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.Pseudoweathers();
    return proto.state.v1.Pseudoweathers.deserializeBinaryFromReader(
        msg,
        reader,
    );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.Pseudoweathers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.Pseudoweathers}
 */
proto.state.v1.Pseudoweathers.deserializeBinaryFromReader = function (
    msg,
    reader,
) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setFairylock(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setGravity(value);
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIondeluge(value);
                break;
            case 4:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMagicroom(value);
                break;
            case 5:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMudsport(value);
                break;
            case 6:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setTrickroom(value);
                break;
            case 7:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setWatersport(value);
                break;
            case 8:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setWonderroom(value);
                break;
            case 9:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFairylockMinDur(value);
                break;
            case 10:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGravityMinDur(value);
                break;
            case 11:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setIondelugeMinDur(value);
                break;
            case 12:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMagicroomMinDur(value);
                break;
            case 13:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMudsportMinDur(value);
                break;
            case 14:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTrickroomMinDur(value);
                break;
            case 15:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setWatersportMinDur(value);
                break;
            case 16:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setWonderroomMinDur(value);
                break;
            case 17:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setFairylockMaxDur(value);
                break;
            case 18:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGravityMaxDur(value);
                break;
            case 19:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setIondelugeMaxDur(value);
                break;
            case 20:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMagicroomMaxDur(value);
                break;
            case 21:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMudsportMaxDur(value);
                break;
            case 22:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTrickroomMaxDur(value);
                break;
            case 23:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setWatersportMaxDur(value);
                break;
            case 24:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setWonderroomMaxDur(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.Pseudoweathers.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.Pseudoweathers.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.Pseudoweathers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.Pseudoweathers.serializeBinaryToWriter = function (
    message,
    writer,
) {
    var f = undefined;
    f = message.getFairylock();
    if (f) {
        writer.writeBool(1, f);
    }
    f = message.getGravity();
    if (f) {
        writer.writeBool(2, f);
    }
    f = message.getIondeluge();
    if (f) {
        writer.writeBool(3, f);
    }
    f = message.getMagicroom();
    if (f) {
        writer.writeBool(4, f);
    }
    f = message.getMudsport();
    if (f) {
        writer.writeBool(5, f);
    }
    f = message.getTrickroom();
    if (f) {
        writer.writeBool(6, f);
    }
    f = message.getWatersport();
    if (f) {
        writer.writeBool(7, f);
    }
    f = message.getWonderroom();
    if (f) {
        writer.writeBool(8, f);
    }
    f = message.getFairylockMinDur();
    if (f !== 0) {
        writer.writeInt32(9, f);
    }
    f = message.getGravityMinDur();
    if (f !== 0) {
        writer.writeInt32(10, f);
    }
    f = message.getIondelugeMinDur();
    if (f !== 0) {
        writer.writeInt32(11, f);
    }
    f = message.getMagicroomMinDur();
    if (f !== 0) {
        writer.writeInt32(12, f);
    }
    f = message.getMudsportMinDur();
    if (f !== 0) {
        writer.writeInt32(13, f);
    }
    f = message.getTrickroomMinDur();
    if (f !== 0) {
        writer.writeInt32(14, f);
    }
    f = message.getWatersportMinDur();
    if (f !== 0) {
        writer.writeInt32(15, f);
    }
    f = message.getWonderroomMinDur();
    if (f !== 0) {
        writer.writeInt32(16, f);
    }
    f = message.getFairylockMaxDur();
    if (f !== 0) {
        writer.writeInt32(17, f);
    }
    f = message.getGravityMaxDur();
    if (f !== 0) {
        writer.writeInt32(18, f);
    }
    f = message.getIondelugeMaxDur();
    if (f !== 0) {
        writer.writeInt32(19, f);
    }
    f = message.getMagicroomMaxDur();
    if (f !== 0) {
        writer.writeInt32(20, f);
    }
    f = message.getMudsportMaxDur();
    if (f !== 0) {
        writer.writeInt32(21, f);
    }
    f = message.getTrickroomMaxDur();
    if (f !== 0) {
        writer.writeInt32(22, f);
    }
    f = message.getWatersportMaxDur();
    if (f !== 0) {
        writer.writeInt32(23, f);
    }
    f = message.getWonderroomMaxDur();
    if (f !== 0) {
        writer.writeInt32(24, f);
    }
};

/**
 * optional bool fairylock = 1;
 * @return {boolean}
 */
proto.state.v1.Pseudoweathers.prototype.getFairylock = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 1, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setFairylock = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional bool gravity = 2;
 * @return {boolean}
 */
proto.state.v1.Pseudoweathers.prototype.getGravity = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 2, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setGravity = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional bool iondeluge = 3;
 * @return {boolean}
 */
proto.state.v1.Pseudoweathers.prototype.getIondeluge = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 3, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setIondeluge = function (value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional bool magicroom = 4;
 * @return {boolean}
 */
proto.state.v1.Pseudoweathers.prototype.getMagicroom = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 4, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setMagicroom = function (value) {
    return jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * optional bool mudsport = 5;
 * @return {boolean}
 */
proto.state.v1.Pseudoweathers.prototype.getMudsport = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 5, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setMudsport = function (value) {
    return jspb.Message.setProto3BooleanField(this, 5, value);
};

/**
 * optional bool trickroom = 6;
 * @return {boolean}
 */
proto.state.v1.Pseudoweathers.prototype.getTrickroom = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 6, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setTrickroom = function (value) {
    return jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * optional bool watersport = 7;
 * @return {boolean}
 */
proto.state.v1.Pseudoweathers.prototype.getWatersport = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 7, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setWatersport = function (value) {
    return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional bool wonderroom = 8;
 * @return {boolean}
 */
proto.state.v1.Pseudoweathers.prototype.getWonderroom = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 8, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setWonderroom = function (value) {
    return jspb.Message.setProto3BooleanField(this, 8, value);
};

/**
 * optional int32 fairylock_min_dur = 9;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getFairylockMinDur = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setFairylockMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional int32 gravity_min_dur = 10;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getGravityMinDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 10, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setGravityMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional int32 iondeluge_min_dur = 11;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getIondelugeMinDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 11, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setIondelugeMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional int32 magicroom_min_dur = 12;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getMagicroomMinDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 12, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setMagicroomMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 12, value);
};

/**
 * optional int32 mudsport_min_dur = 13;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getMudsportMinDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 13, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setMudsportMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 13, value);
};

/**
 * optional int32 trickroom_min_dur = 14;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getTrickroomMinDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 14, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setTrickroomMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 14, value);
};

/**
 * optional int32 watersport_min_dur = 15;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getWatersportMinDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 15, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setWatersportMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 15, value);
};

/**
 * optional int32 wonderroom_min_dur = 16;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getWonderroomMinDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 16, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setWonderroomMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 16, value);
};

/**
 * optional int32 fairylock_max_dur = 17;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getFairylockMaxDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 17, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setFairylockMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 17, value);
};

/**
 * optional int32 gravity_max_dur = 18;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getGravityMaxDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 18, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setGravityMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 18, value);
};

/**
 * optional int32 iondeluge_max_dur = 19;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getIondelugeMaxDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 19, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setIondelugeMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 19, value);
};

/**
 * optional int32 magicroom_max_dur = 20;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getMagicroomMaxDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 20, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setMagicroomMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 20, value);
};

/**
 * optional int32 mudsport_max_dur = 21;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getMudsportMaxDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 21, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setMudsportMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 21, value);
};

/**
 * optional int32 trickroom_max_dur = 22;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getTrickroomMaxDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 22, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setTrickroomMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 22, value);
};

/**
 * optional int32 watersport_max_dur = 23;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getWatersportMaxDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 23, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setWatersportMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 23, value);
};

/**
 * optional int32 wonderroom_max_dur = 24;
 * @return {number}
 */
proto.state.v1.Pseudoweathers.prototype.getWonderroomMaxDur = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 24, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Pseudoweathers} returns this
 */
proto.state.v1.Pseudoweathers.prototype.setWonderroomMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 24, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.Weather.prototype.toObject = function (opt_includeInstance) {
        return proto.state.v1.Weather.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.Weather} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.Weather.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                weather: jspb.Message.getFieldWithDefault(msg, 1, 0),
                minDur: jspb.Message.getFieldWithDefault(msg, 2, 0),
                maxDur: jspb.Message.getFieldWithDefault(msg, 3, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.Weather}
 */
proto.state.v1.Weather.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.Weather();
    return proto.state.v1.Weather.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.Weather} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.Weather}
 */
proto.state.v1.Weather.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.state.v1.Weathers} */ (
                    reader.readEnum()
                );
                msg.setWeather(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMinDur(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxDur(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.Weather.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.Weather.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.Weather} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.Weather.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getWeather();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getMinDur();
    if (f !== 0) {
        writer.writeInt32(2, f);
    }
    f = message.getMaxDur();
    if (f !== 0) {
        writer.writeInt32(3, f);
    }
};

/**
 * optional Weathers weather = 1;
 * @return {!proto.state.v1.Weathers}
 */
proto.state.v1.Weather.prototype.getWeather = function () {
    return /** @type {!proto.state.v1.Weathers} */ (
        jspb.Message.getFieldWithDefault(this, 1, 0)
    );
};

/**
 * @param {!proto.state.v1.Weathers} value
 * @return {!proto.state.v1.Weather} returns this
 */
proto.state.v1.Weather.prototype.setWeather = function (value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional int32 min_dur = 2;
 * @return {number}
 */
proto.state.v1.Weather.prototype.getMinDur = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Weather} returns this
 */
proto.state.v1.Weather.prototype.setMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 max_dur = 3;
 * @return {number}
 */
proto.state.v1.Weather.prototype.getMaxDur = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Weather} returns this
 */
proto.state.v1.Weather.prototype.setMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.Terrains.prototype.toObject = function (
        opt_includeInstance,
    ) {
        return proto.state.v1.Terrains.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.Terrains} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.Terrains.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                terrain: jspb.Message.getFieldWithDefault(msg, 1, 0),
                minDur: jspb.Message.getFieldWithDefault(msg, 2, 0),
                maxDur: jspb.Message.getFieldWithDefault(msg, 3, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.Terrains}
 */
proto.state.v1.Terrains.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.Terrains();
    return proto.state.v1.Terrains.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.Terrains} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.Terrains}
 */
proto.state.v1.Terrains.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.state.v1.Terrain} */ (
                    reader.readEnum()
                );
                msg.setTerrain(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMinDur(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxDur(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.Terrains.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.Terrains.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.Terrains} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.Terrains.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTerrain();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getMinDur();
    if (f !== 0) {
        writer.writeInt32(2, f);
    }
    f = message.getMaxDur();
    if (f !== 0) {
        writer.writeInt32(3, f);
    }
};

/**
 * optional Terrain terrain = 1;
 * @return {!proto.state.v1.Terrain}
 */
proto.state.v1.Terrains.prototype.getTerrain = function () {
    return /** @type {!proto.state.v1.Terrain} */ (
        jspb.Message.getFieldWithDefault(this, 1, 0)
    );
};

/**
 * @param {!proto.state.v1.Terrain} value
 * @return {!proto.state.v1.Terrains} returns this
 */
proto.state.v1.Terrains.prototype.setTerrain = function (value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional int32 min_dur = 2;
 * @return {number}
 */
proto.state.v1.Terrains.prototype.getMinDur = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Terrains} returns this
 */
proto.state.v1.Terrains.prototype.setMinDur = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 max_dur = 3;
 * @return {number}
 */
proto.state.v1.Terrains.prototype.getMaxDur = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Terrains} returns this
 */
proto.state.v1.Terrains.prototype.setMaxDur = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.Field.prototype.toObject = function (opt_includeInstance) {
        return proto.state.v1.Field.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.Field} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.Field.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                pseudoweather:
                    (f = msg.getPseudoweather()) &&
                    proto.state.v1.Pseudoweathers.toObject(includeInstance, f),
                weather:
                    (f = msg.getWeather()) &&
                    proto.state.v1.Weather.toObject(includeInstance, f),
                terrain:
                    (f = msg.getTerrain()) &&
                    proto.state.v1.Terrains.toObject(includeInstance, f),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.Field}
 */
proto.state.v1.Field.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.Field();
    return proto.state.v1.Field.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.Field}
 */
proto.state.v1.Field.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.state.v1.Pseudoweathers();
                reader.readMessage(
                    value,
                    proto.state.v1.Pseudoweathers.deserializeBinaryFromReader,
                );
                msg.setPseudoweather(value);
                break;
            case 2:
                var value = new proto.state.v1.Weather();
                reader.readMessage(
                    value,
                    proto.state.v1.Weather.deserializeBinaryFromReader,
                );
                msg.setWeather(value);
                break;
            case 3:
                var value = new proto.state.v1.Terrains();
                reader.readMessage(
                    value,
                    proto.state.v1.Terrains.deserializeBinaryFromReader,
                );
                msg.setTerrain(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.Field.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.Field.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.Field.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPseudoweather();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.state.v1.Pseudoweathers.serializeBinaryToWriter,
        );
    }
    f = message.getWeather();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.state.v1.Weather.serializeBinaryToWriter,
        );
    }
    f = message.getTerrain();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.state.v1.Terrains.serializeBinaryToWriter,
        );
    }
};

/**
 * optional Pseudoweathers pseudoweather = 1;
 * @return {?proto.state.v1.Pseudoweathers}
 */
proto.state.v1.Field.prototype.getPseudoweather = function () {
    return /** @type{?proto.state.v1.Pseudoweathers} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.Pseudoweathers, 1)
    );
};

/**
 * @param {?proto.state.v1.Pseudoweathers|undefined} value
 * @return {!proto.state.v1.Field} returns this
 */
proto.state.v1.Field.prototype.setPseudoweather = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Field} returns this
 */
proto.state.v1.Field.prototype.clearPseudoweather = function () {
    return this.setPseudoweather(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Field.prototype.hasPseudoweather = function () {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Weather weather = 2;
 * @return {?proto.state.v1.Weather}
 */
proto.state.v1.Field.prototype.getWeather = function () {
    return /** @type{?proto.state.v1.Weather} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.Weather, 2)
    );
};

/**
 * @param {?proto.state.v1.Weather|undefined} value
 * @return {!proto.state.v1.Field} returns this
 */
proto.state.v1.Field.prototype.setWeather = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Field} returns this
 */
proto.state.v1.Field.prototype.clearWeather = function () {
    return this.setWeather(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Field.prototype.hasWeather = function () {
    return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Terrains terrain = 3;
 * @return {?proto.state.v1.Terrains}
 */
proto.state.v1.Field.prototype.getTerrain = function () {
    return /** @type{?proto.state.v1.Terrains} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.Terrains, 3)
    );
};

/**
 * @param {?proto.state.v1.Terrains|undefined} value
 * @return {!proto.state.v1.Field} returns this
 */
proto.state.v1.Field.prototype.setTerrain = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Field} returns this
 */
proto.state.v1.Field.prototype.clearTerrain = function () {
    return this.setTerrain(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Field.prototype.hasTerrain = function () {
    return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.Context.prototype.toObject = function (opt_includeInstance) {
        return proto.state.v1.Context.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.Context} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.Context.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                sideConditions1:
                    (f = msg.getSideConditions1()) &&
                    proto.state.v1.SideConditions.toObject(includeInstance, f),
                sideConditions2:
                    (f = msg.getSideConditions2()) &&
                    proto.state.v1.SideConditions.toObject(includeInstance, f),
                volatileStatus1:
                    (f = msg.getVolatileStatus1()) &&
                    proto.state.v1.VolatileStatuses.toObject(
                        includeInstance,
                        f,
                    ),
                volatileStatus2:
                    (f = msg.getVolatileStatus2()) &&
                    proto.state.v1.VolatileStatuses.toObject(
                        includeInstance,
                        f,
                    ),
                boosts1:
                    (f = msg.getBoosts1()) &&
                    proto.state.v1.Boosts.toObject(includeInstance, f),
                boosts2:
                    (f = msg.getBoosts2()) &&
                    proto.state.v1.Boosts.toObject(includeInstance, f),
                field:
                    (f = msg.getField()) &&
                    proto.state.v1.Field.toObject(includeInstance, f),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.Context}
 */
proto.state.v1.Context.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.Context();
    return proto.state.v1.Context.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.Context} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.Context}
 */
proto.state.v1.Context.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.state.v1.SideConditions();
                reader.readMessage(
                    value,
                    proto.state.v1.SideConditions.deserializeBinaryFromReader,
                );
                msg.setSideConditions1(value);
                break;
            case 2:
                var value = new proto.state.v1.SideConditions();
                reader.readMessage(
                    value,
                    proto.state.v1.SideConditions.deserializeBinaryFromReader,
                );
                msg.setSideConditions2(value);
                break;
            case 3:
                var value = new proto.state.v1.VolatileStatuses();
                reader.readMessage(
                    value,
                    proto.state.v1.VolatileStatuses.deserializeBinaryFromReader,
                );
                msg.setVolatileStatus1(value);
                break;
            case 4:
                var value = new proto.state.v1.VolatileStatuses();
                reader.readMessage(
                    value,
                    proto.state.v1.VolatileStatuses.deserializeBinaryFromReader,
                );
                msg.setVolatileStatus2(value);
                break;
            case 5:
                var value = new proto.state.v1.Boosts();
                reader.readMessage(
                    value,
                    proto.state.v1.Boosts.deserializeBinaryFromReader,
                );
                msg.setBoosts1(value);
                break;
            case 6:
                var value = new proto.state.v1.Boosts();
                reader.readMessage(
                    value,
                    proto.state.v1.Boosts.deserializeBinaryFromReader,
                );
                msg.setBoosts2(value);
                break;
            case 7:
                var value = new proto.state.v1.Field();
                reader.readMessage(
                    value,
                    proto.state.v1.Field.deserializeBinaryFromReader,
                );
                msg.setField(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.Context.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.Context.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.Context} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.Context.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSideConditions1();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.state.v1.SideConditions.serializeBinaryToWriter,
        );
    }
    f = message.getSideConditions2();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.state.v1.SideConditions.serializeBinaryToWriter,
        );
    }
    f = message.getVolatileStatus1();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.state.v1.VolatileStatuses.serializeBinaryToWriter,
        );
    }
    f = message.getVolatileStatus2();
    if (f != null) {
        writer.writeMessage(
            4,
            f,
            proto.state.v1.VolatileStatuses.serializeBinaryToWriter,
        );
    }
    f = message.getBoosts1();
    if (f != null) {
        writer.writeMessage(
            5,
            f,
            proto.state.v1.Boosts.serializeBinaryToWriter,
        );
    }
    f = message.getBoosts2();
    if (f != null) {
        writer.writeMessage(
            6,
            f,
            proto.state.v1.Boosts.serializeBinaryToWriter,
        );
    }
    f = message.getField();
    if (f != null) {
        writer.writeMessage(7, f, proto.state.v1.Field.serializeBinaryToWriter);
    }
};

/**
 * optional SideConditions side_conditions1 = 1;
 * @return {?proto.state.v1.SideConditions}
 */
proto.state.v1.Context.prototype.getSideConditions1 = function () {
    return /** @type{?proto.state.v1.SideConditions} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.SideConditions, 1)
    );
};

/**
 * @param {?proto.state.v1.SideConditions|undefined} value
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.setSideConditions1 = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.clearSideConditions1 = function () {
    return this.setSideConditions1(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Context.prototype.hasSideConditions1 = function () {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional SideConditions side_conditions2 = 2;
 * @return {?proto.state.v1.SideConditions}
 */
proto.state.v1.Context.prototype.getSideConditions2 = function () {
    return /** @type{?proto.state.v1.SideConditions} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.SideConditions, 2)
    );
};

/**
 * @param {?proto.state.v1.SideConditions|undefined} value
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.setSideConditions2 = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.clearSideConditions2 = function () {
    return this.setSideConditions2(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Context.prototype.hasSideConditions2 = function () {
    return jspb.Message.getField(this, 2) != null;
};

/**
 * optional VolatileStatuses volatile_status1 = 3;
 * @return {?proto.state.v1.VolatileStatuses}
 */
proto.state.v1.Context.prototype.getVolatileStatus1 = function () {
    return /** @type{?proto.state.v1.VolatileStatuses} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.VolatileStatuses, 3)
    );
};

/**
 * @param {?proto.state.v1.VolatileStatuses|undefined} value
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.setVolatileStatus1 = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.clearVolatileStatus1 = function () {
    return this.setVolatileStatus1(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Context.prototype.hasVolatileStatus1 = function () {
    return jspb.Message.getField(this, 3) != null;
};

/**
 * optional VolatileStatuses volatile_status2 = 4;
 * @return {?proto.state.v1.VolatileStatuses}
 */
proto.state.v1.Context.prototype.getVolatileStatus2 = function () {
    return /** @type{?proto.state.v1.VolatileStatuses} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.VolatileStatuses, 4)
    );
};

/**
 * @param {?proto.state.v1.VolatileStatuses|undefined} value
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.setVolatileStatus2 = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.clearVolatileStatus2 = function () {
    return this.setVolatileStatus2(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Context.prototype.hasVolatileStatus2 = function () {
    return jspb.Message.getField(this, 4) != null;
};

/**
 * optional Boosts boosts1 = 5;
 * @return {?proto.state.v1.Boosts}
 */
proto.state.v1.Context.prototype.getBoosts1 = function () {
    return /** @type{?proto.state.v1.Boosts} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.Boosts, 5)
    );
};

/**
 * @param {?proto.state.v1.Boosts|undefined} value
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.setBoosts1 = function (value) {
    return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.clearBoosts1 = function () {
    return this.setBoosts1(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Context.prototype.hasBoosts1 = function () {
    return jspb.Message.getField(this, 5) != null;
};

/**
 * optional Boosts boosts2 = 6;
 * @return {?proto.state.v1.Boosts}
 */
proto.state.v1.Context.prototype.getBoosts2 = function () {
    return /** @type{?proto.state.v1.Boosts} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.Boosts, 6)
    );
};

/**
 * @param {?proto.state.v1.Boosts|undefined} value
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.setBoosts2 = function (value) {
    return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.clearBoosts2 = function () {
    return this.setBoosts2(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Context.prototype.hasBoosts2 = function () {
    return jspb.Message.getField(this, 6) != null;
};

/**
 * optional Field field = 7;
 * @return {?proto.state.v1.Field}
 */
proto.state.v1.Context.prototype.getField = function () {
    return /** @type{?proto.state.v1.Field} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.Field, 7)
    );
};

/**
 * @param {?proto.state.v1.Field|undefined} value
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.setField = function (value) {
    return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.Context} returns this
 */
proto.state.v1.Context.prototype.clearField = function () {
    return this.setField(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.Context.prototype.hasField = function () {
    return jspb.Message.getField(this, 7) != null;
};

goog.object.extend(exports, proto.state.v1);
