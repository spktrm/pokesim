// source: state/v1/history.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var state_v1_pokemon_pb = require("../../state/v1/pokemon_pb.js");
goog.object.extend(proto, state_v1_pokemon_pb);
var state_v1_context_pb = require("../../state/v1/context_pb.js");
goog.object.extend(proto, state_v1_context_pb);
goog.exportSymbol("proto.state.v1.History", null, global);
goog.exportSymbol("proto.state.v1.HistoryItem", null, global);
goog.exportSymbol("proto.state.v1.Stats", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.Stats = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.Stats.displayName = "proto.state.v1.Stats";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.HistoryItem = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.v1.HistoryItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.HistoryItem.displayName = "proto.state.v1.HistoryItem";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.v1.History = function (opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.state.v1.History.repeatedFields_,
        null,
    );
};
goog.inherits(proto.state.v1.History, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.state.v1.History.displayName = "proto.state.v1.History";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.Stats.prototype.toObject = function (opt_includeInstance) {
        return proto.state.v1.Stats.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.Stats} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.Stats.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                order: jspb.Message.getFieldWithDefault(msg, 1, 0),
                isCritical: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    2,
                    false,
                ),
                damage: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    3,
                    0.0,
                ),
                effectiveness: jspb.Message.getFieldWithDefault(msg, 4, 0),
                missed: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
                move: jspb.Message.getFieldWithDefault(msg, 6, 0),
                targetFainted: jspb.Message.getBooleanFieldWithDefault(
                    msg,
                    7,
                    false,
                ),
                moveCounter: jspb.Message.getFieldWithDefault(msg, 9, 0),
                switchCounter: jspb.Message.getFieldWithDefault(msg, 10, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.Stats}
 */
proto.state.v1.Stats.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.Stats();
    return proto.state.v1.Stats.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.Stats}
 */
proto.state.v1.Stats.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setOrder(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsCritical(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readFloat());
                msg.setDamage(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEffectiveness(value);
                break;
            case 5:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMissed(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMove(value);
                break;
            case 7:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setTargetFainted(value);
                break;
            case 9:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMoveCounter(value);
                break;
            case 10:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSwitchCounter(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.Stats.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.Stats.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.Stats.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getOrder();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getIsCritical();
    if (f) {
        writer.writeBool(2, f);
    }
    f = message.getDamage();
    if (f !== 0.0) {
        writer.writeFloat(3, f);
    }
    f = message.getEffectiveness();
    if (f !== 0) {
        writer.writeInt32(4, f);
    }
    f = message.getMissed();
    if (f) {
        writer.writeBool(5, f);
    }
    f = message.getMove();
    if (f !== 0) {
        writer.writeInt32(6, f);
    }
    f = message.getTargetFainted();
    if (f) {
        writer.writeBool(7, f);
    }
    f = message.getMoveCounter();
    if (f !== 0) {
        writer.writeInt32(9, f);
    }
    f = message.getSwitchCounter();
    if (f !== 0) {
        writer.writeInt32(10, f);
    }
};

/**
 * optional int32 order = 1;
 * @return {number}
 */
proto.state.v1.Stats.prototype.getOrder = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setOrder = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bool is_critical = 2;
 * @return {boolean}
 */
proto.state.v1.Stats.prototype.getIsCritical = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 2, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setIsCritical = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional float damage = 3;
 * @return {number}
 */
proto.state.v1.Stats.prototype.getDamage = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setDamage = function (value) {
    return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional int32 effectiveness = 4;
 * @return {number}
 */
proto.state.v1.Stats.prototype.getEffectiveness = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setEffectiveness = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional bool missed = 5;
 * @return {boolean}
 */
proto.state.v1.Stats.prototype.getMissed = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 5, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setMissed = function (value) {
    return jspb.Message.setProto3BooleanField(this, 5, value);
};

/**
 * optional int32 move = 6;
 * @return {number}
 */
proto.state.v1.Stats.prototype.getMove = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setMove = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional bool target_fainted = 7;
 * @return {boolean}
 */
proto.state.v1.Stats.prototype.getTargetFainted = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 7, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setTargetFainted = function (value) {
    return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional int32 move_counter = 9;
 * @return {number}
 */
proto.state.v1.Stats.prototype.getMoveCounter = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setMoveCounter = function (value) {
    return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional int32 switch_counter = 10;
 * @return {number}
 */
proto.state.v1.Stats.prototype.getSwitchCounter = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 10, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.state.v1.Stats} returns this
 */
proto.state.v1.Stats.prototype.setSwitchCounter = function (value) {
    return jspb.Message.setProto3IntField(this, 10, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.HistoryItem.prototype.toObject = function (
        opt_includeInstance,
    ) {
        return proto.state.v1.HistoryItem.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.HistoryItem} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.HistoryItem.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                user:
                    (f = msg.getUser()) &&
                    state_v1_pokemon_pb.Pokemon.toObject(includeInstance, f),
                target:
                    (f = msg.getTarget()) &&
                    state_v1_pokemon_pb.Pokemon.toObject(includeInstance, f),
                context:
                    (f = msg.getContext()) &&
                    state_v1_context_pb.Context.toObject(includeInstance, f),
                stats:
                    (f = msg.getStats()) &&
                    proto.state.v1.Stats.toObject(includeInstance, f),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.HistoryItem}
 */
proto.state.v1.HistoryItem.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.HistoryItem();
    return proto.state.v1.HistoryItem.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.HistoryItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.HistoryItem}
 */
proto.state.v1.HistoryItem.deserializeBinaryFromReader = function (
    msg,
    reader,
) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new state_v1_pokemon_pb.Pokemon();
                reader.readMessage(
                    value,
                    state_v1_pokemon_pb.Pokemon.deserializeBinaryFromReader,
                );
                msg.setUser(value);
                break;
            case 2:
                var value = new state_v1_pokemon_pb.Pokemon();
                reader.readMessage(
                    value,
                    state_v1_pokemon_pb.Pokemon.deserializeBinaryFromReader,
                );
                msg.setTarget(value);
                break;
            case 3:
                var value = new state_v1_context_pb.Context();
                reader.readMessage(
                    value,
                    state_v1_context_pb.Context.deserializeBinaryFromReader,
                );
                msg.setContext(value);
                break;
            case 4:
                var value = new proto.state.v1.Stats();
                reader.readMessage(
                    value,
                    proto.state.v1.Stats.deserializeBinaryFromReader,
                );
                msg.setStats(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.HistoryItem.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.HistoryItem.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.HistoryItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.HistoryItem.serializeBinaryToWriter = function (
    message,
    writer,
) {
    var f = undefined;
    f = message.getUser();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            state_v1_pokemon_pb.Pokemon.serializeBinaryToWriter,
        );
    }
    f = message.getTarget();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            state_v1_pokemon_pb.Pokemon.serializeBinaryToWriter,
        );
    }
    f = message.getContext();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            state_v1_context_pb.Context.serializeBinaryToWriter,
        );
    }
    f = message.getStats();
    if (f != null) {
        writer.writeMessage(4, f, proto.state.v1.Stats.serializeBinaryToWriter);
    }
};

/**
 * optional Pokemon user = 1;
 * @return {?proto.state.v1.Pokemon}
 */
proto.state.v1.HistoryItem.prototype.getUser = function () {
    return /** @type{?proto.state.v1.Pokemon} */ (
        jspb.Message.getWrapperField(this, state_v1_pokemon_pb.Pokemon, 1)
    );
};

/**
 * @param {?proto.state.v1.Pokemon|undefined} value
 * @return {!proto.state.v1.HistoryItem} returns this
 */
proto.state.v1.HistoryItem.prototype.setUser = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.HistoryItem} returns this
 */
proto.state.v1.HistoryItem.prototype.clearUser = function () {
    return this.setUser(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.HistoryItem.prototype.hasUser = function () {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Pokemon target = 2;
 * @return {?proto.state.v1.Pokemon}
 */
proto.state.v1.HistoryItem.prototype.getTarget = function () {
    return /** @type{?proto.state.v1.Pokemon} */ (
        jspb.Message.getWrapperField(this, state_v1_pokemon_pb.Pokemon, 2)
    );
};

/**
 * @param {?proto.state.v1.Pokemon|undefined} value
 * @return {!proto.state.v1.HistoryItem} returns this
 */
proto.state.v1.HistoryItem.prototype.setTarget = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.HistoryItem} returns this
 */
proto.state.v1.HistoryItem.prototype.clearTarget = function () {
    return this.setTarget(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.HistoryItem.prototype.hasTarget = function () {
    return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Context context = 3;
 * @return {?proto.state.v1.Context}
 */
proto.state.v1.HistoryItem.prototype.getContext = function () {
    return /** @type{?proto.state.v1.Context} */ (
        jspb.Message.getWrapperField(this, state_v1_context_pb.Context, 3)
    );
};

/**
 * @param {?proto.state.v1.Context|undefined} value
 * @return {!proto.state.v1.HistoryItem} returns this
 */
proto.state.v1.HistoryItem.prototype.setContext = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.HistoryItem} returns this
 */
proto.state.v1.HistoryItem.prototype.clearContext = function () {
    return this.setContext(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.HistoryItem.prototype.hasContext = function () {
    return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Stats stats = 4;
 * @return {?proto.state.v1.Stats}
 */
proto.state.v1.HistoryItem.prototype.getStats = function () {
    return /** @type{?proto.state.v1.Stats} */ (
        jspb.Message.getWrapperField(this, proto.state.v1.Stats, 4)
    );
};

/**
 * @param {?proto.state.v1.Stats|undefined} value
 * @return {!proto.state.v1.HistoryItem} returns this
 */
proto.state.v1.HistoryItem.prototype.setStats = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.state.v1.HistoryItem} returns this
 */
proto.state.v1.HistoryItem.prototype.clearStats = function () {
    return this.setStats(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.v1.HistoryItem.prototype.hasStats = function () {
    return jspb.Message.getField(this, 4) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.state.v1.History.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.state.v1.History.prototype.toObject = function (opt_includeInstance) {
        return proto.state.v1.History.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.state.v1.History} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.state.v1.History.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                historyItemsList: jspb.Message.toObjectList(
                    msg.getHistoryItemsList(),
                    proto.state.v1.HistoryItem.toObject,
                    includeInstance,
                ),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.v1.History}
 */
proto.state.v1.History.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.state.v1.History();
    return proto.state.v1.History.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.v1.History} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.v1.History}
 */
proto.state.v1.History.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.state.v1.HistoryItem();
                reader.readMessage(
                    value,
                    proto.state.v1.HistoryItem.deserializeBinaryFromReader,
                );
                msg.addHistoryItems(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.v1.History.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.state.v1.History.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.v1.History} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.v1.History.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHistoryItemsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.state.v1.HistoryItem.serializeBinaryToWriter,
        );
    }
};

/**
 * repeated HistoryItem history_items = 1;
 * @return {!Array<!proto.state.v1.HistoryItem>}
 */
proto.state.v1.History.prototype.getHistoryItemsList = function () {
    return /** @type{!Array<!proto.state.v1.HistoryItem>} */ (
        jspb.Message.getRepeatedWrapperField(
            this,
            proto.state.v1.HistoryItem,
            1,
        )
    );
};

/**
 * @param {!Array<!proto.state.v1.HistoryItem>} value
 * @return {!proto.state.v1.History} returns this
 */
proto.state.v1.History.prototype.setHistoryItemsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.state.v1.HistoryItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.state.v1.HistoryItem}
 */
proto.state.v1.History.prototype.addHistoryItems = function (
    opt_value,
    opt_index,
) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        1,
        opt_value,
        proto.state.v1.HistoryItem,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.state.v1.History} returns this
 */
proto.state.v1.History.prototype.clearHistoryItemsList = function () {
    return this.setHistoryItemsList([]);
};

goog.object.extend(exports, proto.state.v1);
